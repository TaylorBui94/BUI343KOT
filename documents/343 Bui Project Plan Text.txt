King of Tokyo PCA software adaptation project plan by Buoy Inc.1. Overview	32. Goals and Scope	32.1 Project Goals	32.2 Project Scope	33. Development	34. Schedule and Budget	44.1 Work Breakdown Structure	44.2 Schedule and Milestone	45. Risk Management	46. Sub-contract Management	57. Communication and Reporting	58. Delivery Plan	59. Quality Assurance	610. Configuration and Change Management	611. Security Aspects	612. Abbreviations and Definitions	613. References	614. Revisions	61. OverviewKing of Tokyo PC aims to expand the playerbase of the “King of Tokyo” franchise by providing a software version of the game. The targeted audience is anyone older than 8 with access to a computer or all ages with parental consent. This software is a virtual expansion to the “King of Tokyo” board game, but it will be a lot easier to access as a physical copy is not needed. The product will cost very little as there is no physical product or retailer markup. The main cost will be hiring the software engineers to design and create the software. The project is estimated to take a maximum of 5 months with 2 software engineers working on it.2. Goals and Scope2.1 Project GoalsThis project aims to create a software adaptation of the King of Tokyo board game using the Unity game engine. Diagramming and work delegation tools such as UML diagrams and trello will be used to ensure that the project meets the deadline without compromising quality. Additionally, the Unity ecosystem also contains many tools that allow us to efficiently collaborate on code and improve user experience through aggregated data. The game will be supported on major operating systems like Windows, Mac OS, and Linux due to Unity’s inherent cross-platform support.2.2 Project ScopeThe game is slated to be a single executable file that is to be played on one computer. Thus, players must get on the computer when it is their turn. Multiplayer capability is possible if requirements are changed, but it is out of scope as of now (Rev 1.0).3. DevelopmentIn approximately 2 months, King of Tokyo PC will be launch ready with the help of two software engineers. King of Tokyo PC will be developed in the Unity game engine with C#. The Unity game engine abstracts many of the details to streamline the process of game development. Unity’s tools allow the developers to create user interfaces with ease and art can be easily created with Unity’s design tools. In short, Unity is an environment with a plethora of tools that allows developers to focus on other things such as gameplay.Sound design will be fairly straight forward: each game action will have a sound associated with it and there will be ambient, catchy, and royalty free music.Art design will hopefully be original art from the board game, but this is dependent on the response from the creator of the game. In the event that the creator of King of Tokyo disallows the use of his art, royalty free art will be used instead.4. Schedule and Budget4.1 Work Breakdown Structure4.2 Schedule and MilestoneMilestonesDescriptionMilestone CriteriaPlanned Datem0Start ProjectProject plan is greenlit<2019-10-02>m1Start PlanningDefined goals with ways to achieve them<2019-10-07>m2DevelopmentPlayable game with no significant issues<2019-10-14>m3Quality CheckUnit testing, player testing<2019-12-03>m4Final ReleaseRelease to end-users<2019-12-17>m5AdvertisementPromotion of end product<2019-12-25>4.3 BudgetBudget for Period in kUS$Categorym0- m1m1- m2m3- m4m4- m5Human Resources2252Advertisement00110Licensing0050Travel Cost0022Total221314Total Cumulative2417315. Risk ManagementRiskSolutionResponsibilityLate DeliveryFrequent progress reviewProject TeamChanges in RequirementGood documentation and OOP practicesProject TeamPoor code documentationCode review weeklyProject TeamPoor Coding PracticesFollow Unity’s software guidelines and enforce good coding practicesProject TeamCommunication errorRegular meetings to discuss direction of projectProject Team6. Sub-contract Management7. Communication and ReportingType of CommunicationMethod/ToolFrequency/ ScheduleInformationParticipant/ ResponsibilitiesInternal Communication:Project MeetingTeleconferenceWeeklyDiscussion of any todo or problemProject TeamMilestone MeetingPhysical meeting in VECS buildingMonthlyDistribution of laborProject TeamFinal Project meetingTeleconferenceAt the start of m4Last minute adjustmentProject TeamExternal Communication and Reporting:Project TodoTrelloWhen availablePending issuesProject TeamProject StatusDiscordWhen availableCurrent progress and status of the projectProject TeamSoftwareGithubWhen availablePlace where the software is storedProject Team8. Delivery PlanIdent.DeliverablePlanned DateReceiverD1Prototype of software<2019-12-03>a.GiacaloneD2Final software<2019-12-17>a.GiacaloneD4Pre-order Release<2019-12-17>Pre-ordersD5Official Public Release<2019-12-25>Public9. Quality AssuranceContinual testing and documentation throughout the development of the project will ensure that error propagation will be minimal by the time the deadline comes around. However, dedicated testing will start two weeks before the deadline for redundancy.10. Configuration and Change ManagementNew features such as online multiplayer support may be implemented through configuration management if deemed necessary. Changes to documents or deliverables within the project will be considered on a case by case basis.11. Security AspectsThere are no security considerations as of Rev 1.0 since there is currently no online multiplayer support.12. Abbreviations and Definitions13. ReferencesI don’t think we need this just yet -- if at all. In the template the references are actually documents we created that are [I guess] too big or wordy for the project plan. Something like a gantt chart, project schedule, project specifications, etc14. RevisionsPage 1